package fx

import "core:strings"

import D3D11 "vendor:directx/d3d11"
import D3D "vendor:directx/d3d_compiler"

font_hlsl := #load("font.hlsl")
font_png : []u8 = #load("font.png")
font_texture : Texture
font_shader: ^D3D11.IPixelShader

Character :: struct {
    advance: f32,

    left   : f32,
    bottom : f32,
    right  : f32,
    top    : f32,

    left_uv   : f32,
    bottom_uv : f32,
    right_uv  : f32,
    top_uv    : f32,

    width  : f32,
    height : f32,
}

// See and of this file for more details
default_font : [512]Character = {
    32  = Character{0.28125, 0, -0, 0, -0, 0, 1, 0, 1, 0, 0},
    33  = Character{0.28759766, 0.043017577, -0.76484376, 0.24458008, 0.03828125, 0.11079387, 0.51051527, 0.12876044, 0.58210307, 0.20156249, 0.803125},
    34  = Character{0.4658203, 0.069628909, -0.76484376, 0.39619142, -0.41484374, 0.5599582, 0.9276462, 0.58906686, 0.958844, 0.32656252, 0.35000002},
    35  = Character{0.63330078, -0.01508789, -0.76484376, 0.6474121, 0.03828125, 0.7653899, 0.51051527, 0.8244429, 0.58210307, 0.6625, 0.803125},
    36  = Character{0.64160156, 0.02470703, -0.86640626, 0.61689454, 0.13984375, 0.690181, 0.018175488, 0.74296659, 0.107869074, 0.5921875, 1.00625},
    37  = Character{0.98193359, 0.07768555, -0.77265626, 0.90424806, 0.04609375, 0.32249305, 0.29115599, 0.39616993, 0.36413649, 0.8265625, 0.81875},
    38  = Character{0.64404297, 0.016162109, -0.77265626, 0.6630371, 0.04609375, 0.43252087, 0.29115599, 0.49018106, 0.36413649, 0.646875, 0.81875},
    39  = Character{0.29980469, 0.068652347, -0.76484376, 0.23115234, -0.41484374, 0.6254178, 0.9276462, 0.63990253, 0.958844, 0.16249999, 0.35000002},
    40  = Character{0.36474609, 0.072314456, -0.80390626, 0.35200197, 0.17109375, 0.8322423, 0.018175488, 0.8571727, 0.10508356, 0.27968752, 0.975},
    41  = Character{0.36474609, 0.0127441408, -0.80390626, 0.29243165, 0.17109375, 0.89352363, 0.018175488, 0.91845405, 0.10508356, 0.27968752, 0.975},
    42  = Character{0.50097656, 0.02080078, -0.76484376, 0.48017579, -0.28203124, 0.3238858, 0.9276462, 0.36483288, 0.97068244, 0.45937502, 0.48281252},
    43  = Character{0.66162109, 0.062060546, -0.55390626, 0.59956056, -0.016406249, 0.239623949, 0.9276462, 0.2875348, 0.97555709, 0.5375, 0.5375},
    44  = Character{0.28808594, 0.029589843, -0.13984375, 0.23896484, 0.21015625, 0.96246517, 0.29115599, 0.98112816, 0.32235375, 0.20937499, 0.34999999},
    45  = Character{0.45996094, 0.035449218, -0.38984376, 0.42451173, -0.23515625, 0.7827994, 0.8350278, 0.81747913, 0.84881616, 0.38906252, 0.154687509},
    46  = Character{0.28808594, 0.043261718, -0.16328125, 0.24482422, 0.03828125, 0.8197075, 0.9276462, 0.83767408, 0.94561279, 0.20156249, 0.20156249},
    47  = Character{0.36035156, -0.0104492186, -0.79609376, 0.37080079, 0.14765625, 0.33363509, 0.16789694, 0.36761838, 0.25201949, 0.38125002, 0.94375},
    48  = Character{0.63085938, 0.027148437, -0.77265626, 0.60371095, 0.04609375, 0.61427575, 0.29115599, 0.66566855, 0.36413649, 0.5765625, 0.81875},
    49  = Character{0.40673828, 0.011767578, -0.76484376, 0.35395509, 0.03828125, 0.56135094, 0.6191504, 0.59185237, 0.69073814, 0.34218752, 0.803125},
    50  = Character{0.60986328, 0.042041015, -0.77265626, 0.5717285, 0.03828125, 0.48962393, 0.4011838, 0.53683847, 0.47346798, 0.5296875, 0.8109375},
    51  = Character{0.61767578, 0.029101562, -0.77265626, 0.59003907, 0.04609375, 0.70201945, 0.29115599, 0.7520195, 0.36413649, 0.5609375, 0.81875},
    52  = Character{0.64599609, 0.023486327, -0.76484376, 0.62348634, 0.03828125, 0.77165735, 0.6191504, 0.82513928, 0.69073814, 0.6, 0.803125},
    53  = Character{0.5932617, 0.029345702, -0.76484376, 0.5668457, 0.04609375, 0.57318938, 0.4011838, 0.6211003, 0.47346798, 0.5375, 0.8109375},
    54  = Character{0.62011719, 0.025683593, -0.77265626, 0.5944336, 0.04609375, 0.78837043, 0.29115599, 0.83906686, 0.36413649, 0.56875, 0.81875},
    55  = Character{0.56591797, 0.0142089846, -0.76484376, 0.551709, 0.03828125, 0.3691504, 0.7270891, 0.4170613, 0.7986769, 0.5375, 0.803125},
    56  = Character{0.61865234, 0.024951171, -0.77265626, 0.59370118, 0.04609375, 0.87541777, 0.29115599, 0.9261142, 0.36413649, 0.56875, 0.81875},
    57  = Character{0.62011719, 0.025683593, -0.77265626, 0.5944336, 0.04609375, 0.018175488, 0.4011838, 0.06887186, 0.47416437, 0.56875, 0.81875},
    58  = Character{0.28808594, 0.043261718, -0.55390626, 0.24482422, 0.03828125, 0.18530641, 0.9276462, 0.203272969, 0.98043174, 0.20156249, 0.5921875},
    59  = Character{0.3017578, 0.030566406, -0.55390626, 0.25556642, 0.21015625, 0.9429665, 0.6191504, 0.96302229, 0.68725628, 0.225000009, 0.7640625},
    60  = Character{0.66162109, 0.050585937, -0.58515626, 0.58027345, 0.0148437498, 0.018175488, 0.9276462, 0.065389968, 0.98112816, 0.5296875, 0.6},
    61  = Character{0.66162109, 0.07792969, -0.46796876, 0.5841797, -0.10234375, 0.47848186, 0.9276462, 0.52360725, 0.96023679, 0.50625, 0.36562502},
    62  = Character{0.66162109, 0.081347659, -0.58515626, 0.61103517, 0.0148437498, 0.101740949, 0.9276462, 0.14895542, 0.98112816, 0.5296875, 0.6},
    63  = Character{0.51123047, 0.005419922, -0.77265626, 0.49604493, 0.03828125, 0.6574512, 0.4011838, 0.70118386, 0.47346798, 0.49062502, 0.8109375},
    64  = Character{0.9658203, 0.026660156, -0.73359376, 0.93916017, 0.22578125, 0.21594708, 0.16789694, 0.29728413, 0.25341225, 0.9125, 0.959375},
    65  = Character{0.6899414, -0.0097167967, -0.76484376, 0.6996582, 0.03828125, 0.26956823, 0.7270891, 0.33279943, 0.7986769, 0.709375, 0.803125},
    66  = Character{0.65429688, 0.054492187, -0.76484376, 0.6310547, 0.03828125, 0.18182452, 0.7270891, 0.233217269, 0.7986769, 0.5765625, 0.803125},
    67  = Character{0.73046875, 0.02470703, -0.77265626, 0.71064454, 0.04609375, 0.10522284, 0.4011838, 0.16636489, 0.47416437, 0.6859375, 0.81875},
    68  = Character{0.72167969, 0.055468749, -0.76484376, 0.69453126, 0.03828125, 0.45341223, 0.7270891, 0.51037604, 0.7986769, 0.6390625, 0.803125},
    69  = Character{0.6010742, 0.054736327, -0.76484376, 0.56879884, 0.03828125, 0.018175488, 0.7270891, 0.063997217, 0.7986769, 0.5140625, 0.803125},
    70  = Character{0.59033203, 0.054736327, -0.76484376, 0.56098634, 0.03828125, 0.86149019, 0.6191504, 0.9066156, 0.69073814, 0.50625, 0.803125},
    71  = Character{0.74609375, 0.02470703, -0.77265626, 0.71845704, 0.04609375, 0.20271587, 0.4011838, 0.26455432, 0.47416437, 0.69375, 0.81875},
    72  = Character{0.74316406, 0.05595703, -0.76484376, 0.68720704, 0.03828125, 0.67903894, 0.6191504, 0.73530638, 0.69073814, 0.63125, 0.803125},
    73  = Character{0.26855469, 0.053027343, -0.76484376, 0.21552734, 0.03828125, 0.62820333, 0.6191504, 0.64268804, 0.69073814, 0.16249999, 0.803125},
    74  = Character{0.57080078, 0.01665039, -0.76484376, 0.5150879, 0.04609375, 0.82318938, 0.4011838, 0.86761838, 0.47346798, 0.49843752, 0.8109375},
    75  = Character{0.671875, 0.054248046, -0.76484376, 0.67768556, 0.03828125, 0.46942896, 0.6191504, 0.52500004, 0.69073814, 0.6234375, 0.803125},
    76  = Character{0.56542969, 0.053515624, -0.76484376, 0.55195314, 0.03828125, 0.38864899, 0.6191504, 0.43307799, 0.69073814, 0.49843752, 0.803125},
    77  = Character{0.9033203, 0.054003906, -0.76484376, 0.8493164, 0.03828125, 0.28140667, 0.6191504, 0.35229805, 0.69073814, 0.7953125, 0.803125},
    78  = Character{0.75341797, 0.053271484, -0.76484376, 0.7001465, 0.03828125, 0.18739554, 0.6191504, 0.2450557, 0.69073814, 0.646875, 0.803125},
    79  = Character{0.76464844, 0.027636718, -0.77265626, 0.73701173, 0.04609375, 0.30090529, 0.4011838, 0.36413649, 0.47416437, 0.709375, 0.81875},
    80  = Character{0.63867188, 0.05595703, -0.76484376, 0.61689454, 0.03828125, 0.018175488, 0.6191504, 0.068175487, 0.69073814, 0.5609375, 0.803125},
    81  = Character{0.76464844, 0.027636718, -0.77265626, 0.73701173, 0.100781247, 0.4743036, 0.16789694, 0.53753483, 0.24575208, 0.709375, 0.8734375},
    82  = Character{0.64355469, 0.054492187, -0.76484376, 0.6466797, 0.03828125, 0.8607938, 0.51051527, 0.9135794, 0.58210307, 0.5921875, 0.803125},
    83  = Character{0.64160156, 0.02470703, -0.77265626, 0.61689454, 0.04609375, 0.40048745, 0.4011838, 0.453273, 0.47416437, 0.5921875, 0.81875},
    84  = Character{0.6455078, 0.014941406, -0.76484376, 0.6305664, 0.03828125, 0.6741643, 0.51051527, 0.729039, 0.58210307, 0.615625, 0.803125},
    85  = Character{0.7441406, 0.05644531, -0.76484376, 0.6876953, 0.04609375, 0.018175488, 0.51051527, 0.07444289, 0.58279943, 0.63125, 0.8109375},
    86  = Character{0.6899414, -0.0097167967, -0.76484376, 0.6996582, 0.03828125, 0.4868384, 0.51051527, 0.55006963, 0.58210307, 0.709375, 0.803125},
    87  = Character{0.98535156, -0.0065429686, -0.76484376, 0.99189454, 0.03828125, 0.36149022, 0.51051527, 0.45048746, 0.58210307, 0.9984375, 0.803125},
    88  = Character{0.6821289, -0.0058105467, -0.76484376, 0.68793947, 0.03828125, 0.26330084, 0.51051527, 0.32513925, 0.58210307, 0.69375, 0.803125},
    89  = Character{0.67871094, -0.007519531, -0.76484376, 0.68623048, 0.03828125, 0.16511142, 0.51051527, 0.22694986, 0.58210307, 0.69375, 0.803125},
    90  = Character{0.62890625, 0.026171874, -0.76484376, 0.60273439, 0.03828125, 0.5864206, 0.51051527, 0.63781339, 0.58210307, 0.5765625, 0.803125},
    91  = Character{0.36474609, 0.075488284, -0.80390626, 0.33955079, 0.17109375, 0.95480496, 0.018175488, 0.97834259, 0.10508356, 0.26406252, 0.975},
    92  = Character{0.36035156, -0.0104492186, -0.79609376, 0.37080079, 0.14765625, 0.40396935, 0.16789694, 0.43795267, 0.25201949, 0.38125002, 0.94375},
    93  = Character{0.36474609, 0.025195312, -0.80390626, 0.28925782, 0.17109375, 0.018175488, 0.16789694, 0.041713092, 0.254805, 0.26406252, 0.975},
    94  = Character{0.4711914, 0.0059082033, -0.74140626, 0.46528322, -0.36015624, 0.4011838, 0.9276462, 0.44213092, 0.9616295, 0.45937502, 0.38125002},
    95  = Character{0.45605469, -0.032910157, -0.03828125, 0.48896486, 0.116406247, 0.87402505, 0.9276462, 0.92054319, 0.94143456, 0.521875, 0.15468749},
    96  = Character{0.3227539, 0.04008789, -0.79609376, 0.2729004, -0.57890624, 0.7626044, 0.9276462, 0.78335655, 0.94700557, 0.232812509, 0.21718752},
    97  = Character{0.56152344, 0.011035156, -0.58515626, 0.51728517, 0.04609375, 0.61566848, 0.7270891, 0.6607939, 0.78335655, 0.50625, 0.63125},
    98  = Character{0.61230469, 0.042773437, -0.76484376, 0.59589845, 0.04609375, 0.90396935, 0.4011838, 0.953273, 0.47346798, 0.553125, 0.8109375},
    99  = Character{0.57128906, 0.017871093, -0.58515626, 0.5553711, 0.04609375, 0.88377434, 0.7270891, 0.9316852, 0.78335655, 0.5375, 0.63125},
    100 = Character{0.61230469, 0.016406249, -0.76484376, 0.56953126, 0.04609375, 0.73753476, 0.4011838, 0.78683847, 0.47346798, 0.553125, 0.8109375},
    101 = Character{0.5830078, 0.015917968, -0.58515626, 0.56904298, 0.04609375, 0.018175488, 0.8350278, 0.06747911, 0.89129525, 0.553125, 0.63125},
    102 = Character{0.37011719, -0.024121094, -0.79609376, 0.38837892, 0.03828125, 0.6602367, 0.16789694, 0.69700557, 0.24227019, 0.41250002, 0.834375},
    103 = Character{0.61328125, 0.01689453, -0.58515626, 0.57001954, 0.24921875, 0.73335654, 0.16789694, 0.78266019, 0.24227019, 0.553125, 0.834375},
    104 = Character{0.59130859, 0.042529296, -0.76484376, 0.5487793, 0.03828125, 0.100348189, 0.7270891, 0.14547352, 0.7986769, 0.50625, 0.803125},
    105 = Character{0.2421875, 0.028857421, -0.78828126, 0.214794919, 0.03828125, 0.26956823, 0.29115599, 0.28614205, 0.36483288, 0.18593749, 0.8265625},
    106 = Character{0.2421875, -0.047070313, -0.78828126, 0.21699218, 0.24140625, 0.15327299, 0.018175488, 0.176810578, 0.109958209, 0.26406249, 1.0296875},
    107 = Character{0.5488281, 0.045214843, -0.76484376, 0.56708986, 0.03828125, 0.104526468, 0.6191504, 0.15104456, 0.69073814, 0.521875, 0.803125},
    108 = Character{0.2421875, 0.043749999, -0.76484376, 0.1984375, 0.03828125, 0.9499303, 0.51051527, 0.96371865, 0.58210307, 0.15468749, 0.803125},
    109 = Character{0.87597656, 0.04423828, -0.59296876, 0.83173829, 0.03828125, 0.77722836, 0.7270891, 0.84742337, 0.78335655, 0.7875, 0.63125},
    110 = Character{0.5908203, 0.042285156, -0.58515626, 0.54853517, 0.03828125, 0.25703344, 0.8350278, 0.30215877, 0.89059889, 0.50625, 0.6234375},
    111 = Character{0.59960938, 0.019335937, -0.58515626, 0.58027345, 0.04609375, 0.103830084, 0.8350278, 0.15383008, 0.89129525, 0.5609375, 0.63125},
    112 = Character{0.61230469, 0.042773437, -0.58515626, 0.59589845, 0.24140625, 0.183913648, 0.29115599, 0.233217269, 0.36483288, 0.553125, 0.8265625},
    113 = Character{0.61230469, 0.016406249, -0.58515626, 0.56953126, 0.24140625, 0.098259054, 0.29115599, 0.147562668, 0.36483288, 0.553125, 0.8265625},
    114 = Character{0.37646484, 0.04448242, -0.58515626, 0.38666993, 0.03828125, 0.19018106, 0.8350278, 0.22068244, 0.89059889, 0.34218752, 0.6234375},
    115 = Character{0.52783203, 0.020068359, -0.58515626, 0.51069337, 0.04609375, 0.6971448, 0.7270891, 0.74087745, 0.78335655, 0.49062502, 0.63125},
    116 = Character{0.32714844, -0.024365235, -0.71015626, 0.34125978, 0.03828125, 0.546727, 0.7270891, 0.57931757, 0.79380226, 0.36562502, 0.7484375},
    117 = Character{0.59130859, 0.042529296, -0.57734376, 0.5487793, 0.03828125, 0.70132309, 0.8350278, 0.74644846, 0.88990253, 0.50625, 0.615625},
    118 = Character{0.5620117, -0.0072753904, -0.57734376, 0.5692871, 0.03828125, 0.61357933, 0.8350278, 0.6649721, 0.88990253, 0.5765625, 0.615625},
    119 = Character{0.81835938, -0.0001953125, -0.57734376, 0.8185547, 0.03828125, 0.33850974, 0.8350278, 0.41149026, 0.88990253, 0.81875, 0.615625},
    120 = Character{0.54589844, 0.00029296876, -0.57734376, 0.54560548, 0.03828125, 0.52862114, 0.8350278, 0.5772284, 0.88990253, 0.5453125, 0.615625},
    121 = Character{0.5620117, -0.0072753904, -0.57734376, 0.5692871, 0.24140625, 0.52653199, 0.29115599, 0.57792479, 0.36413649, 0.5765625, 0.81875},
    122 = Character{0.55224609, 0.026904296, -0.57734376, 0.5253418, 0.03828125, 0.4478412, 0.8350278, 0.4922702, 0.88990253, 0.49843752, 0.615625},
    123 = Character{0.42626953, 0.035449218, -0.80390626, 0.40107423, 0.17109375, 0.14700557, 0.16789694, 0.1795961, 0.254805, 0.36562502, 0.975},
    124 = Character{0.33251953, 0.092822269, -0.99921876, 0.23969726, 0.27265626, 0.018175488, 0.018175488, 0.031267408, 0.13154596, 0.14687499, 1.271875},
    125 = Character{0.42626953, 0.025195312, -0.80390626, 0.39082032, 0.17109375, 0.07806406, 0.16789694, 0.11065459, 0.254805, 0.36562502, 0.975},
    126 = Character{0.66162109, 0.050341282, -0.41328126, 0.61127877, -0.15703125, 0.67625344, 0.9276462, 0.7262535, 0.95048749, 0.56093746, 0.25625002},
    199 = Character{0.73046875, 0.02470703, -0.77265626, 0.71064454, 0.24140625, 0.31135097, 0.018175488, 0.37249306, 0.108565457, 0.6859375, 1.0140625},
    214 = Character{0.76464844, 0.027636718, -0.96796876, 0.73701173, 0.04609375, 0.49798048, 0.018175488, 0.5612117, 0.108565457, 0.709375, 1.0140625},
    220 = Character{0.7441406, 0.05644531, -0.96796876, 0.6876953, 0.04609375, 0.59756267, 0.018175488, 0.6538301, 0.108565457, 0.63125, 1.0140625},
    231 = Character{0.57128906, 0.017871093, -0.58515626, 0.5553711, 0.24140625, 0.81901109, 0.16789694, 0.866922, 0.24157381, 0.5375, 0.8265625},
    246 = Character{0.59960938, 0.019335937, -0.78828126, 0.58027345, 0.04609375, 0.57388574, 0.16789694, 0.6238858, 0.24227019, 0.5609375, 0.834375},
    252 = Character{0.59130859, 0.042529296, -0.78828126, 0.5487793, 0.03828125, 0.9032729, 0.16789694, 0.94839835, 0.24157381, 0.50625, 0.8265625},
    286 = Character{0.74609375, 0.02470703, -0.97578126, 0.71845704, 0.04609375, 0.213161558, 0.018175488, 0.275, 0.10926183, 0.69375, 1.021875},
    287 = Character{0.61328125, 0.01689453, -0.79609376, 0.57001954, 0.24921875, 0.067618385, 0.018175488, 0.116921999, 0.111350968, 0.553125, 1.0453125},
    304 = Character{0.26855469, 0.041552734, -0.96796876, 0.22749023, 0.03828125, 0.7793175, 0.018175488, 0.79589134, 0.107869074, 0.18593749, 1.00625},
    305 = Character{0.2421875, 0.043749999, -0.57734376, 0.1984375, 0.03828125, 0.96803617, 0.7270891, 0.9818245, 0.78196377, 0.15468749, 0.615625},
    350 = Character{0.64160156, 0.02470703, -0.77265626, 0.61689454, 0.24140625, 0.40884399, 0.018175488, 0.46162954, 0.108565457, 0.5921875, 1.0140625},
    351 = Character{0.52783203, 0.020068359, -0.58515626, 0.51069337, 0.24140625, 0.018175488, 0.29115599, 0.061908077, 0.36483288, 0.49062502, 0.8265625},
}

init_font :: proc() {
    // Takes 200 ms at startup maybe use qoi instead
    
    font_texture = load_texture_from_bytes(font_png)

	ps_blob: ^D3D11.IBlob
	D3D.Compile(raw_data(font_hlsl), len(font_hlsl), "font.hlsl", nil, nil, "ps_main", "ps_5_0", 0, 0, &ps_blob, nil)
	assert(ps_blob != nil)

	device->CreatePixelShader(ps_blob->GetBufferPointer(), ps_blob->GetBufferSize(), nil, &font_shader)
}

draw_char :: proc(char: int, x, y, size: f32, color: Color) -> f32 {
    if char >= len(default_font) do return 0

    ch := default_font[char]

    char_width  := ch.width * size
    char_height := ch.height * size

    pos_x := x + ch.left * size
    pos_y := y + ch.bottom * size + size * 0.9 // TODO: Fix this

    u_left   := ch.left_uv
    u_right  := ch.right_uv
    v_top    := ch.top_uv
    v_bottom := ch.bottom_uv

    verts := []Vertex{
        {{pos_x, pos_y + char_height}, {u_left, v_top}, color},
        {{pos_x, pos_y}, {u_left, v_bottom}, color},
        {{pos_x + char_width, pos_y}, {u_right, v_bottom}, color},

        {{pos_x, pos_y + char_height}, {u_left, v_top}, color},
        {{pos_x + char_width, pos_y}, {u_right, v_bottom}, color},
        {{pos_x + char_width, pos_y + char_height}, {u_right, v_top}, color},
    }

    copy(verticies[verticies_count:verticies_count + len(verts)], verts[:])
    verticies_count += len(verts)

    return ch.advance * size
}

draw_text :: proc(text: string, x, y, size: f32, color: Color, boldness : f32 = 1.0) {
    if(verticies_count > 0) {
        end_render()
    }

    use_texture(font_texture)

    update_constant_buffer({size / 128.0 * 8 * boldness})

	device_context->PSSetShader(font_shader, nil, 0)

    cursor_x := x

    y := y

    for char in text {
        ch := char

        if ch == '\n' {
            cursor_x = x
            y += size
            continue
        }

        if ch == ' ' {
            cursor_x += default_font[' '].advance * size
            continue
        }

        if ch >= 512 || default_font[ch].advance == 0.0 {
            ch = '?'
        }

        advance := draw_char(int(ch), cursor_x, y, size, color)
        cursor_x += advance
    }

    end_render()

	device_context->PSSetShader(pixel_shader, nil, 0)
}

measure_text :: proc(text: string, size: f32) -> f32 {
    width: f32 = 0

    for char in text {
        if char == '\n' {
            break
        }

        if int(char) < len(default_font) {
            width += default_font[char].advance * size
        }
    }

    return width
}

TextAlign :: enum {
    LEFT,
    CENTER,
    RIGHT,
}

draw_text_aligned :: proc(text: string, x, y, size: f32, color: Color, align: TextAlign) {
    if ctx.is_minimized do return

    final_x := x

    switch align {
    case .CENTER:
        text_width := measure_text(text, size)
        final_x = x - text_width / 2
    case .RIGHT:
        text_width := measure_text(text, size)
        final_x = x - text_width
    case .LEFT:
    }

    draw_text(text, final_x, y, size, color)
}

draw_text_wrapped :: proc(text: string, x, y, max_width, size: f32, color: Color) {
    if ctx.is_minimized do return

    if(verticies_count > 0) {
        end_render()
    }

    use_texture(font_texture)

    update_constant_buffer({size / 128.0 * 8})

	device_context->PSSetShader(font_shader, nil, 0)
    device_context->PSSetConstantBuffers(0, 1, &constant_buffer)

    cursor_x := x
    cursor_y := y
    line_height := size

    words := strings.split(text, " ")
    defer delete(words)

    for word in words {
        word_width := measure_text(word, size)
        space_width := default_font[' '].advance * size

        if cursor_x + word_width > x + max_width && cursor_x > x {
            cursor_x = x
            cursor_y += line_height
        }

        for char in word {
            ch := char

            if ch >= 512 || default_font[ch].advance == 0.0 {
                ch = '?'
            }

            advance := draw_char(int(ch), cursor_x, cursor_y, size, color)
            cursor_x += advance
        }

        cursor_x += space_width
    }

    end_render()

	device_context->PSSetShader(pixel_shader, nil, 0)
}


// For generating fonts

// msdf-atlas-gen.exe -font .\Inter.ttf -format png -imageout font.png -csv font.csv -size 128 -outerempadding 0.2 -pxrange 8 -yorigin top -charset .\ascii-tr.txt
// font_csv := #load("font.csv")

// import "core:fmt"
// import "core:strconv"
// import "core:encoding/csv"

// load_from_csv :: proc() {
//     r: csv.Reader
//     r.trim_leading_space  = true
//     r.reuse_record        = true
//     r.reuse_record_buffer = true
//     defer csv.reader_destroy(&r)

//     csv.reader_init_with_string(&r, font_csv)

//     for r, _, err in csv.iterator_next(&r) {
//         assert(err == nil)

//         char := strconv.atoi(r[0])

//         advance := f32(strconv.atof(r[1]))

//         left    := f32(strconv.atof(r[2]))
//         bottom  := f32(strconv.atof(r[3]))
//         right   := f32(strconv.atof(r[4]))
//         top     := f32(strconv.atof(r[5]))


//         inv_tex_width  := 1.0 / f32(font_texture.width)
//         inv_tex_height := 1.0 / f32(font_texture.height)

//         left_px    := f32(strconv.atof(r[6])) * inv_tex_width
//         bottom_px  := f32(strconv.atof(r[7])) * inv_tex_width
//         right_px   := f32(strconv.atof(r[8])) * inv_tex_height
//         top_px     := f32(strconv.atof(r[9])) * inv_tex_height

//         width  := (right - left)
//         height := (top - bottom)

//         default_font[char] = Character{advance, left, bottom, right, top, left_px, bottom_px, right_px, top_px, width, height}

//         fmt.println(char, "=", default_font[char])
//     }
// }